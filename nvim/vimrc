set nocompatible
filetype plugin indent on

"
" General
"
let mapleader=' '         " Remap leader to space
syntax on                 " Enable syntax highlighting
set encoding=UTF-8        " Use UTF-8 encoding
set mouse=a               " Enable mouse support
set history=1000          " More history commands
set undolevels=1000       " More undos
set noshowmatch           " Do not jump cursor to matching parenthesis
set title                 " Set terminal title
set clipboard=unnamedplus " Use system clipboard

"
" Indentation
"
set autoindent      " Auto indent
set smartindent     " Use smart indenting on new lines
set tabstop=4       " Set tabs to 4 spaces
set shiftwidth=4    " Use 4 spaces to indent
set softtabstop=4   " Use 4 spaces to insert/backspace
set smarttab        " Insert tabes based on shiftwidth, not tabstop
set expandtab       " Use the correct number of spaces in insert mode

"
" Search
"
set hlsearch    " Highlight all search matches
set incsearch   " Show search matches as you type

"
" Completion
"
set complete=.,w,b,u,t,i,kspell           " Look for completions in buffers, ctags, imports and dictionary if spell check
autocmd FileType tex setlocal spell       " Enable spell-check for LaTeX files
autocmd FileType markdown setlocal spell  " Enable spell-check for Markdown files
autocmd FileType gitcommit setlocal spell " Enable spell-check for git commit buffers
autocmd FileType txt setlocal spell       " Enable spell-check for text files

"
" Line Numbers
"
set number relativenumber " Show line numbers, use relativenumber only in normal mode
:augroup numbertoggle
:   autocmd!
:   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:   autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
:augroup END

"
" File Handling
"
set autoread        " Reload open files
set hidden          " Allow buffers to not need windows
set noswapfile      " Disable swap files
set nobackup        " No backup before overwriting a file
set nowritebackup   " No backup before overwriting a file
set undofile        " Allow undo after closing and re-opening neovim

"
" Line handling
"
set wrap " Wrap lines
set list " Higlight bad characters
set listchars=tab:̣⭾,nbsp:␣,trail:·

" Plugins
" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Themes
Plug 'morhetz/gruvbox'
Plug 'junegunn/seoul256.vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'sainnhe/forest-night'
Plug 'cocopon/iceberg.vim'
Plug 'ayu-theme/ayu-vim'

Plug 'tpope/vim-fugitive'                               " Git wrapper
Plug 'airblade/vim-gitgutter'                           " Git diff markers

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " Filesystem tree
Plug 'xuyuanp/nerdtree-git-plugin'                      " Git status for NERDTree

Plug 'majutsushi/tagbar'                                " C-tags
Plug 'majutsushi/tagbar'                                " Code navigation tag bar
Plug 'junegunn/fzf.vim'                                 " File fuzzy search

Plug 'scrooloose/syntastic'                             " Syntax check
Plug 'w0rp/ale'                                         " Async linting
Plug 'puremourning/vimspector'                          " Visual debugger

Plug 'vim-airline/vim-airline'                          " Statusline/tabline
Plug 'vim-airline/vim-airline-themes'                   " Statusline themes

Plug 'scrooloose/nerdcommenter'                         " Comment functions

Plug 'kien/rainbow_parentheses.vim'                     " Rainbow parentheses
Plug 'Yggdroot/indentLine'                              " Vertical lines for indentation
Plug 'jiangmiao/auto-pairs'                             " Auto pairing for parentheses, quotes, etc.
Plug 'tpope/vim-surround'                               " Surrond editting

Plug 'mg979/vim-visual-multi'                           " Multiple cursors

Plug 'godlygeek/tabular'                                " Tabular formatting

Plug 'bronson/vim-trailing-whitespace'                  " Clean trailing whitespaces

"Plug 'valloric/youcompleteme'                           " Code completion
Plug 'neoclide/coc.nvim', { 'branch': 'release' }       " Code completion

Plug 'ryanoasis/vim-devicons'                           " Dev icons

Plug 'vim-scripts/LargeFile'                            " Large file support

Plug 'rust-lang/rust.vim', { 'for': 'rust' }            " Rust language support
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }          " Haskell language support

" Initialize plugin system
call plug#end()

set termguicolors
let g:seoul256_background      = 233     " Use darkest background on seoul256 theme
let g:tokyonight_style         = 'night' " Can be storm/night
let g:tokyonight_enable_italic = 1
let ayucolor                   = 'dark'  " Can be light/mirage/dark
colorscheme tokyonight

" Enable filesystem side bar
"autocmd vimenter * NERDTree | wincmd p
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"autocmd vimenter * Tagbar " Enable tagbar

autocmd BufWritePre * FixWhitespace " Fix whitescapes on buffer write
autocmd BufWritePost * GitGutter    " Update git hunk changes on buffer write

" Enable rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

let g:LargeFile=200 " Large file size (in MB)

"
" Airline
"
let g:airline#extensions#tabline#enabled = 1                        " Enable airline
let g:airline_powerline_fonts = 1                                   " Use powerline fonts
let g:airline#extensions#tabline#formatter = 'unique_tail_improved' " Better file names
"let g:airline#extensions#tabline#left_sep = ' '                     " Straight buffer tabs
"let g:airline#extensions#tabline#left_alt_sep = '|'                 " Straight buffer tabs


"
" IndentLine
"
let g:indentLine_setColors = 0
let g:indentLine_char = '▏'

"
" Comments
"
let g:NERDSpaceDelims = 1               " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1           " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left'         " Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDCommentEmptyLines = 1         " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1    " Enable trimming of trailing whitespace when uncommenting
let g:NERDToggleCheckAllLines = 1       " Enable NERDCommenterToggle to check all selected lines is commented or not

"
" Syntastic
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"
" Ale
"
let g:ale_sign_error = '✗✗'
let g:ale_sign_warning = '⚠⚠'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {'rust': ['analyzer']}

"
" Rust
"
let g:rustfmt_autosave = 1 " Rust formatting on buffer write

"
" YCM
"
let g:ycm_language_server =
\ [
\   {
\     'name': 'rust',
\     'cmdline': ['rust-analyzer'],
\     'filetypes': ['rust'],
\     'project_root_files': ['Cargo.toml']
\   }
\ ]

" GitGutter status line
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}

"
" Commands
"
noremap ; :
noremap : ;

" Fix page up/down
noremap <silent> <PageUp> 1000<C-U>
noremap <silent> <PageDown> 1000<C-D>
inoremap <silent> <PageUp> <C-O>1000<C-U>
inoremap <silent> <PageDown> <C-O>1000<C-D>

" Force saving files that require root permission
cnoremap w!! w !sudo tee % > /dev/null

" Easy swap between buffers
nnoremap <leader><leader> <c-^>
nnoremap <leader>j :bp<cr>
nnoremap <leader>k :bn<cr>
nnoremap <leader>d :bd<cr>
nnoremap <leader>w :w<cr>
nnoremap XX :qa!<cr>

" Line numbers
nnoremap <silent> <leader>l :set relativenumber!<cr>

" Clear highlighting
nnoremap <silent> <leader>/ :nohlsearch<cr>

" Tabularize
vnoremap <silent> <leader>t :Tab /

" Code navigation
nnoremap <leader>cg :YcmCompleter GoTo<cr>
nnoremap <leader>ci :YcmCompleter GoToImplementation<cr>
nnoremap <leader>cr :YcmCompleter GoToReferences<cr>
nnoremap <leader>cd :YcmCompleter GetDoc<cr>
nnoremap <leader>cx :YcmCompleter FixIt<cr>
nnoremap <leader>cr :YcmCompleter RefactorRename<cr>
nnoremap <leader>cf :YcmCompleter Format<cr>

" Ale
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>
nnoremap <leader>lr :lrewind<CR>

" Git mappings
nnoremap <leader>z :GitGutterUndoHunk<cr>
nnoremap <leader>[ :GitGutterPrevHunk<cr>
nnoremap <leader>] :GitGutterNextHunk<cr>
nnoremap <leader># :GitGutterFold<cr>

" Vimspector
let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector
nnoremap <leader>dd :call vimspector#Launch()<cr>
nnoremap <leader>dx :VimspectorReset<cr>
nnoremap <leader>de :VimspectorEval
nnoremap <leader>dw :VimspectorWatch
nnoremap <leader>do :VimspectorShowOutput

" Side-bars
nnoremap <leader>` :NERDTreeToggle<cr> :TagbarToggle<cr> :wincmd p<cr>

" Searching
nnoremap <leader>f :FZF<cr>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>ff :Files<cr>

" Code completion
" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>ca  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>ce  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>cc  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>co  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>ck  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>cp  :<C-u>CocListResume<CR>
